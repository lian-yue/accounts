#!/usr/bin/env node
process.env.NODE_ENV = process.env.NODE_ENV || 'production'
if (process.env.NODE_ENV === 'development' && !process.env.DEBUG) {
  process.env.DEBUG = '*,-babel,-koa-send,-mquery,-eslint:*'
}

const debug = require('debug')('server')
const http  = require('http')



if (process.env.NODE_ENV === 'development') {
  const webpack = require('webpack')
  const configs = require('../webpack.config.server')

  let isServer = false
  let key = 0
  let watch = function watch() {
    let config = configs[key]
    let compiler = webpack(config)
    key++

    compiler.watch({
      aggregateTimeout: 1000,
      poll: true,
    }, (err, stats) => {
      if (err) {
        throw err
      }
      let data = stats.toJson()
      data.errors.forEach(err => console.error(err))
      data.warnings.forEach(err => console.warn(err))


      if (configs[key]) {
        watch()
      } else if (!isServer) {
        isServer = true
        createServer()
      }
    })
  }

  watch()
} else {
  createServer()
}




function createServer() {
  const port  = normalizePort(process.env.PORT || '3000')
  const host  = process.env.HOST || '0.0.0.0'
  let app
  if (process.env.NODE_ENV === 'development') {
    app = require('../dev').default
    // let koaWebpack = require('koa-webpack')
    // let configs = require('../webpack.config.client')
    // configs.forEach(function (config) {
    //   app.middleware.unshift(koaWebpack({
    //     config,
    //     dev: {
    //       noInfo: true,
    //     },
    //     hot: {
    //       noInfo: true,
    //     },
    //   }))
    // })
  } else {
    app = require('../dist').default
  }

  // proxy
  app.proxy = true

  let server = http.createServer(app.callback())

  server.listen(port, host)
  server.on('error', function (error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
      default:
        throw error
    }
  })


  server.on('listening', function () {
    let addr = server.address()
    let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    debug('Listening on ' + bind)
  })

  return server
}



function normalizePort(value) {
  let portInt = parseInt(value, 10)

  if (isNaN(portInt)) {
    // named pipe
    return value
  }

  if (portInt >= 0) {
    // port number
    return portInt
  }
  return false
}
