#!/usr/bin/env node
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
if (process.env.NODE_ENV == 'development' && !process.env.DEBUG) {
  process.env.DEBUG = '*,-babel,-koa-send,-mquery';
}

const debug = require('debug')('server');
const http  = require('http');
const port  = normalizePort(process.env.PORT || '3000');
const host  = process.env.HOST || '0.0.0.0'


var server
if (process.env.NODE_ENV == 'development') {
  const webpack = require('webpack')


  const configs = require('../webpack.config.server')
  let key = 0
  function watch() {
    let config = configs[key]
    let compiler = webpack(config)
    key++

    compiler.watch({
      aggregateTimeout: 1000,
      poll: true,
    }, (err, stats) => {
      if (err) {
        throw err
      }
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))
      if (configs[key]) {
        watch()
      } else {
        if (!server) {
          server = app()
        }
      }
    })
  }

  watch()
} else {
  server = app()
}




function app() {
  if (process.env.NODE_ENV == 'development') {
    var app = require('../dev').default()
    /*
    let koaWebpack = require('koa-webpack');
    let configs = require('../webpack.config.client');
    configs.forEach(function(config) {
      app.middleware.unshift(koaWebpack({
        config,
        dev: {
          noInfo: true,
        },
        hot: {
          noInfo: true,
        },
      }))
    })*/
  } else {
    var app = require('../dist').default()
  }

  // proxy
  app.proxy = true

  var server = http.createServer(app.callback());

  server.listen(port, host);
  server.on('error', onError);
  server.on('listening', onListening);

  return server
}



function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
